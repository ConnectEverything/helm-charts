# Currently must be set to 1
replicaCount: 1

image:
  repository: registry.helix-dev.synadia.io/helix
  tag: "v0.1.0"
  pullPolicy: IfNotPresent

imageCredentials:
  registry: "registry.helix-dev.synadia.io"
  username: ""
  password: ""
  secretTemplate: {}
  secretPatch: []

# Unmanaged pull secrets if credentials not provided in imageCredentials
imagePullSecrets: []

# Helix Configuration Block
helix:
  # Direct Mapping of Helix configuration file
  # config:
  #   public_url: "https://helix.local"
  #   nats_systems:
  #     - name: "nats"
  #       urls: "nats://nats.local"
  #       system_account_creds_file: "/conf/helix/nsc/nats/sys.creds"
  #       operator_signing_key_file: "/conf/helix/nsc/nats/operator.nk"
  config: {}

  # NATS systems' base64-encoded operator signing key and system account creds for Helm-managed secrets
  # secrets:
  #   nats_systems:
  #     nats:
  #       operator.nk: ""
  #       sys.creds: ""
  secrets: {}

  secretsTemplate: {}
  secretsPatch: []

  # PVC for Helix base volume
  # Currently only used to store default encryption key, if KMS not provided
  pvc:
    storageClassName: ""
    size: ""
  pvcTemplate: {}
  pvcPatch: []

# Embedded Postgres DB
embeddedPostgres:
  persistent: true 
  pvc:
    storageClassName: ""
    size: ""
  pvcTemplate: {}
  pvcPatch: []

# Embedded Prometheus DB
embeddedPrometheus:
  persistent: true 
  pvc:
    storageClassName: ""
    size: ""
  pvcTemplate: {}
  pvcPatch: []

# Service for Helix UI
service:
  type: ClusterIP
  port: 80

# Ingress for Helix UI
# ingress:
#   enabled: true
#   className: "nginx"
#   annotations: {}
#   hosts:
#     - host: helix.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls:
#     - hosts:
#       - helix.local
#         secretName: helix-tls
ingress: {}

serviceAccount:
  create: true
  annotations: {}
  name: ""

# Permit flexible patch and merge of resources
# deploymentPatch:
#   - op: replace
#     path: /spec/strategy/type
#     value: Recreate
#
# deploymentTemplate:
#   spec:
#     template:
#       spec:
#         initContainers:
#           - name: nats-box
#             image: natsio/nats-box:latest
#             command: ['sh', '-c', 'my-init-script.sh']
#
# servicePatch:
#   - op: add
#     path: /spec/ports/-
#     value:
#       name: https
#       port: 443
#       protocol: TCP
#       targetPort: 443
deploymentTemplate: {}
deploymentPatch: []

configMapTemplate: {}
configMapPatch: []

ingressTemplate: {}
ingressPatch: []

serviceTemplate: {}
servicePatch: {}

serviceAccountTemplate: {}
serviceAccountPatch: []

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
